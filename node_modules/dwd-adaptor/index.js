const request = require("request");
const env = require('./env');

module.exports.setConfig = (config) => {
  return {
    clientsid: config.clientsid,
    env: config.env
  }
};

module.exports.init = (config, requestPayload) => {
  return new Promise((resolve, reject) => {
    const payload = {
      "appName": requestPayload.appName,
      "processName": requestPayload.processName,
      "transactionId": "",
      "stage": "",
      "result": ""
    }
    request(
      {
        rejectUnauthorized: false,
        method: "POST",
        uri: env(config.env),
        body: JSON.stringify(payload),
        headers: {
          "content-type": 'application/json',
          "clientsid": config.clientsid
        }
      },
      (err, apiResp, body) => {
        if (err) {
          return reject(err);
        }
        if (apiResp.statusCode >= 200 && apiResp.statusCode < 400) return resolve(body);
        return reject(body);
      }
    );
  });
};

module.exports.processStage = (config, requestPayload) => {
  return new Promise((resolve, reject) => {
    const payload = {
      "appName": requestPayload.appName,
      "processName": requestPayload.processName,
      "transactionId": requestPayload.transactionId,
      "stage": requestPayload.stage,
      "result": requestPayload.result
    }
    request(
      {
        rejectUnauthorized: false,
        method: "POST",
        uri: env(config.env),
        body: JSON.stringify(payload),
        headers: {
          "content-type": 'application/json',
          "clientsid": config.clientsid
        }
      },
      (err, apiResp, body) => {
        if (err) {
          return reject(err);
        }
        if (apiResp.statusCode >= 200 && apiResp.statusCode < 400) return resolve(body);
        return reject(body);
      }
    );
  });
};
